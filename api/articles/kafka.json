{"title":"kafka","uid":"464082c80523a34f8ff30e1785265886","slug":"kafka","date":"2022-03-29T06:02:54.000Z","updated":"2022-04-05T05:32:08.211Z","comments":true,"path":"api/articles/kafka.json","keywords":null,"cover":[],"content":"<h1 id=\"第一章\"><a href=\"#第一章\" class=\"headerlink\" title=\"第一章\"></a>第一章</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>生产商，超市与消费者的爱恨情仇</p></blockquote>\n<h2 id=\"1-定义\"><a href=\"#1-定义\" class=\"headerlink\" title=\"1. 定义\"></a>1. 定义</h2><p>分布式，发布订阅，消息队列</p>\n<h2 id=\"2-消息队列的应用场景\"><a href=\"#2-消息队列的应用场景\" class=\"headerlink\" title=\"2. 消息队列的应用场景\"></a>2. 消息队列的应用场景</h2><ol>\n<li>缓存消峰</li>\n<li>解耦</li>\n<li>异步通信</li>\n</ol>\n<h2 id=\"3-两种模式\"><a href=\"#3-两种模式\" class=\"headerlink\" title=\"3.两种模式\"></a>3.两种模式</h2><ul>\n<li>点对点（一个生产者 一个消费者 一个主题 会删除数据）</li>\n<li>发布订阅模式（多个生产者，多个消费者而且相互独立，多个主题，不会删除数据）</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">点对点</th>\n<th align=\"center\">订阅</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">不具有topic(类似于一种分类)</td>\n<td align=\"center\">√</td>\n</tr>\n<tr>\n<td align=\"center\">点对点数据传输完成数据会被销毁，</td>\n<td align=\"center\">√</td>\n</tr>\n<tr>\n<td align=\"center\">用户也无法根据自己想要的topic进行消费</td>\n<td align=\"center\">√</td>\n</tr>\n</tbody></table>\n<p>在hadoop中数据副本是不<strong>存在主从关系</strong>的，但是在kafka中是有的</p>\n<p>所有操作均&#x3D;&#x3D;优先对leader操作，Follower只有当leader挂掉才会工作，成为新的leader&#x3D;&#x3D;<br>kafka如何对服务器上下线进行感知以及标识leader-&gt;与zookeeper合作，通过zookeeper配合使用，但是慢慢的会丢弃掉zook在2.8版本以前必须依赖，但之后就不用了</p>\n<h2 id=\"4-架构\"><a href=\"#4-架构\" class=\"headerlink\" title=\"4. 架构\"></a>4. 架构</h2><p>一、生产者</p>\n<p>二、broker</p>\n<p>（1）broker就是服务器</p>\n<p>（2）topic主题</p>\n<p>（3）分区</p>\n<p>（4）可靠性 副本</p>\n<p>（5）生产者与消费者只对leader操作</p>\n<p>三、消费者</p>\n<p>（1）消费者之间相互独立</p>\n<p>（2）消费者组，比如宝妈组，一个分区只能由一个消费者消费</p>\n<p>四、zookeeper</p>\n<p>存储了</p>\n<p>（1）broker.ids 谁在线</p>\n<p>（2）每个分区的leader和isr</p>\n<h1 id=\"第二章-kafka快速入门\"><a href=\"#第二章-kafka快速入门\" class=\"headerlink\" title=\"第二章 kafka快速入门\"></a>第二章 kafka快速入门</h1><h2 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1. 安装\"></a>1. 安装</h2><p>配置kafka</p>\n<p><code>vim conf/server.properties</code></p>\n<pre class=\"line-numbers language-conf\" data-language=\"conf\"><code class=\"language-conf\">broker.id&#x3D;0\nlog.dirs&#x3D;&#x2F;opt&#x2F;module&#x2F;kafka&#x2F;datas\nzookeeper.connect&#x3D;hadoop102:2181,hadoop103:2181,hadoop104:2181&#x2F;kafka<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p><strong>分发并改变broker.id为不一样的数字</strong></p>\n<p>一个问题：当broker.id设置过一样的并且已经启动过了，kafka已经向zookeeper做了注册时，kafka可能会异常停止，解决方法：</p>\n<ol>\n<li>删除掉所有节点上的所有kafka目录</li>\n<li>开启zookeeper，以客户端形式删除掉整个kafka目录</li>\n</ol>\n<pre class=\"line-numbers language-linux\" data-language=\"linux\"><code class=\"language-linux\">#开启zookeeper\n\n#登录zookeeper\nbin&#x2F;zkCli.sh -server 主机ip:2181\n\n# 删除kafka目录\ndeleteall &#x2F;kafka<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>启动时先启动zk再启动kf</p>\n<p>停止时先停止kf再停止zk</p>\n<p>脚本</p>\n<pre class=\"line-numbers language-she\" data-language=\"she\"><code class=\"language-she\">#!&#x2F;bin&#x2F;bash\ncase $1 in\n&quot;start&quot;)\n\tfor i in hadoop102 hadoop103 hadoop104\n\tdo\n\t\tssh $i &quot;绝对路径&quot;\n\tdone\n;;\n&quot;stop&quot;)\n\n;;\nesac<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"2-常用命令行\"><a href=\"#2-常用命令行\" class=\"headerlink\" title=\"2.常用命令行\"></a>2.常用命令行</h2><p>一、主题</p>\n<p>（1）–bootstrap-server hadoop102:9092,hadoop103:9092</p>\n<p>（2）–topic first</p>\n<p>（3）–create</p>\n<p>（4）–delete</p>\n<p>（5）–alter</p>\n<p>（6）–list</p>\n<p>（7）–describe</p>\n<p>（8）–partitions</p>\n<p>（9）–replication-factor</p>\n<p>二、生产者</p>\n<p>（1）–bootstrap-server hadoop102:9092,hadoop103:9092</p>\n<p>（1）–topic first</p>\n<p>三、消费者</p>\n<p>（1）–bootstrap-server hadoop102:9092,hadoop103:9092</p>\n<p>（1）–topic first</p>\n<h1 id=\"第三章、kafka生产者\"><a href=\"#第三章、kafka生产者\" class=\"headerlink\" title=\"第三章、kafka生产者\"></a>第三章、kafka生产者</h1><h2 id=\"3-1-生产者发送消息流程\"><a href=\"#3-1-生产者发送消息流程\" class=\"headerlink\" title=\"3.1 生产者发送消息流程\"></a>3.1 生产者发送消息流程</h2><h3 id=\"3-1-1发送原理\"><a href=\"#3-1-1发送原理\" class=\"headerlink\" title=\"3.1.1发送原理\"></a>3.1.1发送原理</h3><p><img src=\"https://gitee.com/cencus/blog-image/raw/master/blogImage/1648640150816.png\"></p>\n<h3 id=\"3-1-2-重要参数\"><a href=\"#3-1-2-重要参数\" class=\"headerlink\" title=\"3.1.2 重要参数\"></a>3.1.2 重要参数</h3><h2 id=\"3-2-异步发送API\"><a href=\"#3-2-异步发送API\" class=\"headerlink\" title=\"3.2 异步发送API\"></a>3.2 异步发送API</h2><p>什么叫异步发送？<br>代码编写：</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.kafka<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>kafka-clients<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>代码模板</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>producer</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>producer<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">KafkaProducer</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>producer<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ProducerConfig</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>producer<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ProducerRecord</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span>serialization<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StringSerializer</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Properties</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomProducer</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//1. 创建配置</span>\n        <span class=\"token class-name\">Properties</span> properties <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//2. 对配置进行自定义</span>\n        properties<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProducerConfig</span><span class=\"token punctuation\">.</span>BOOTSTRAP_SERVERS_CONFIG<span class=\"token punctuation\">,</span><span class=\"token string\">\"hadoop102:9092,hadoop103:9092\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    \n\n        <span class=\"token comment\">//3. 创建kafka生产者</span>\n        <span class=\"token comment\">// \"\" string</span>\n        <span class=\"token class-name\">KafkaProducer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">KafkaProducer</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">KafkaProducer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>properties<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//4. 让生产者发送数据</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">KafkaProducer</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ProducerRecord</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"first\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"atguigu\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">//5. 关闭资源</span>\n        <span class=\"token class-name\">KafkaProducer</span><span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3-2-2-带回调函数的异步发送\"><a href=\"#3-2-2-带回调函数的异步发送\" class=\"headerlink\" title=\"3.2.2 带回调函数的异步发送\"></a>3.2.2 带回调函数的异步发送</h3><p>回调函数会在 producer 收到 ack 时调用，为异步调用，该方法有两个参数，分别是元<br>数据信息（RecordMetadata）和异常信息（Exception），如果 Exception 为 null，说明消息发<br>送成功，如果 Exception 不为 null，说明消息发送失败。</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>producer</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>producer<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span>serialization<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StringSerializer</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Properties</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomProducerCallback</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//0. 配置</span>\n        <span class=\"token class-name\">Properties</span> properties <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//连接集群BOOTSTRAP_SERVERS_CONFIG等于--bootstrap-server后面的配置</span>\n        properties<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProducerConfig</span><span class=\"token punctuation\">.</span>BOOTSTRAP_SERVERS_CONFIG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hadoop102:9092,hadoop103:9092\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//指定key:value \"key.serializer\";</span>\n<span class=\"token comment\">//        properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,\"org.apache.kafka.common.serialization.StringSerializer\");</span>\n        properties<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProducerConfig</span><span class=\"token punctuation\">.</span>KEY_SERIALIZER_CLASS_CONFIG<span class=\"token punctuation\">,</span> <span class=\"token class-name\">StringSerializer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        properties<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProducerConfig</span><span class=\"token punctuation\">.</span>VALUE_SERIALIZER_CLASS_CONFIG<span class=\"token punctuation\">,</span> <span class=\"token class-name\">StringSerializer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//1. 创建kafka生产消费者</span>\n        <span class=\"token comment\">// \"\" string</span>\n        <span class=\"token class-name\">KafkaProducer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">KafkaProducer</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">KafkaProducer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>properties<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//2. 发送数据,启用回调函数</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">KafkaProducer</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ProducerRecord</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"first\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"atguigu\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token annotation punctuation\">@Override</span>\n                <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onCompletion</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RecordMetadata</span> recordMetadata<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"主题：\"</span> <span class=\"token operator\">+</span> recordMetadata<span class=\"token punctuation\">.</span><span class=\"token function\">topic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"分区：\"</span> <span class=\"token operator\">+</span> recordMetadata<span class=\"token punctuation\">.</span><span class=\"token function\">partition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">&#125;</span>\n                <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">//3. 关闭资源</span>\n        <span class=\"token class-name\">KafkaProducer</span><span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"3-3-同步发送API\"><a href=\"#3-3-同步发送API\" class=\"headerlink\" title=\"3.3 同步发送API\"></a>3.3 同步发送API</h2><p>只需要在异步发送的基础上再<code>.get()</code>方法</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>producer</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>producer<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">KafkaProducer</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>producer<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ProducerConfig</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>producer<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ProducerRecord</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span>serialization<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StringSerializer</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Properties</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ExecutionException</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomProducerSync</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ExecutionException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//0. 配置</span>\n        <span class=\"token class-name\">Properties</span> properties <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//连接集群BOOTSTRAP_SERVERS_CONFIG等于--bootstrap-server后面的配置</span>\n        properties<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProducerConfig</span><span class=\"token punctuation\">.</span>BOOTSTRAP_SERVERS_CONFIG<span class=\"token punctuation\">,</span><span class=\"token string\">\"hadoop102:9092,hadoop103:9092\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//指定key:value \"key.serializer\";</span>\n<span class=\"token comment\">//        properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,\"org.apache.kafka.common.serialization.StringSerializer\");</span>\n        properties<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProducerConfig</span><span class=\"token punctuation\">.</span>KEY_SERIALIZER_CLASS_CONFIG<span class=\"token punctuation\">,</span> <span class=\"token class-name\">StringSerializer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        properties<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProducerConfig</span><span class=\"token punctuation\">.</span>VALUE_SERIALIZER_CLASS_CONFIG<span class=\"token punctuation\">,</span> <span class=\"token class-name\">StringSerializer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//1. 创建kafka生产消费者</span>\n        <span class=\"token comment\">// \"\" string</span>\n        <span class=\"token class-name\">KafkaProducer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">KafkaProducer</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">KafkaProducer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>properties<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//2. 发送数据</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token class-name\">KafkaProducer</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ProducerRecord</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"first\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"atguigu\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//只需要send后面.get()就变成了同步</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\">//3. 关闭资源</span>\n        <span class=\"token class-name\">KafkaProducer</span><span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"3-4-生产者分区\"><a href=\"#3-4-生产者分区\" class=\"headerlink\" title=\"3.4 生产者分区\"></a>3.4 生产者分区</h2><h3 id=\"3-4-1-分区好处\"><a href=\"#3-4-1-分区好处\" class=\"headerlink\" title=\"3.4.1 分区好处\"></a>3.4.1 分区好处</h3><ol>\n<li>便于合理使用存储资源，每个Partition在一个Broker上存储，可以把海量的数据按照分区切割成一<br>块一块数据存储在多台Broker上。合理控制分区的任务，可以实现负载均衡的效果。</li>\n<li>提高并行度，生产者可以以分区为单位发送数据；消费者可以以分区为单位进行消费数据<br><img src=\"https://gitee.com/cencus/blog-image/raw/master/blogImage/1648640708817.png\"><h3 id=\"3-4-2-生产者发送消息的分区策略\"><a href=\"#3-4-2-生产者发送消息的分区策略\" class=\"headerlink\" title=\"3.4.2 生产者发送消息的分区策略\"></a>3.4.2 生产者发送消息的分区策略</h3>默认分区器 DefaultPartitioner</li>\n</ol>\n<ul>\n<li><p>指明partition就用该partition</p>\n</li>\n<li><p>如果<strong>没有分区策略但是有key</strong>就依据key的hash值来进行分区(将key与topic的partition数取余得到partition值)</p>\n</li>\n<li><p>如果<strong>既没有分区策略又没有key</strong>，那么就会选择**黏性分区策略(sticky partition)**，随机选择一个分区，并尽可能一直 使用该分区，待</p>\n</li>\n<li><p>该分区的batch已满或者已完成，Kafka再随机一个分区进行使用（和上一次的分区不同）。</p>\n</li>\n</ul>\n<p>例如：第一次随机选择0号分区，等0号分区当前批次满了（默认16k）或者linger.ms设置的时间到， Kafka再随机一个分区进 行使用（如果还是0会继续随机）。</p>\n<h3 id=\"3-4-3-自定义分区器\"><a href=\"#3-4-3-自定义分区器\" class=\"headerlink\" title=\"3.4.3 自定义分区器\"></a>3.4.3 自定义分区器</h3><p>需求：如果含有atguigu就进入0号分区，否则进入1号分区</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>producer</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>producer<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Partitioner</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Cluster</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyPartitioner</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Partitioner</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//最重要的方法</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">partition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> topic<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> keyBytes<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> valueBytes<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Cluster</span> cluster<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 获取数据</span>\n        <span class=\"token comment\">// atguigu hello</span>\n        <span class=\"token class-name\">String</span> msg <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> partition<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"atguigu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//发送到0号分区</span>\n            partition <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            partition <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> partition<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> map<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后需要在producer中去做配置</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">properties<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProducerConfig</span><span class=\"token punctuation\">.</span>PARTITIONER_CLASS_CONFIG<span class=\"token punctuation\">,</span><span class=\"token string\">\"com.atguigu.kafka.producer.MyPartitioner\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"3-5-生产经验——如何提高吞吐量\"><a href=\"#3-5-生产经验——如何提高吞吐量\" class=\"headerlink\" title=\"3.5 生产经验——如何提高吞吐量\"></a>3.5 生产经验——如何提高吞吐量</h2><p>主要有三个参数</p>\n<ul>\n<li><p>batch.size：每一个发送数据块的大小，默认16k</p>\n</li>\n<li><p>linger.ms：发车的等待时间：默认0ms，企业中一般时间在5~100ms</p>\n</li>\n<li><p>RecordAccumulator：缓冲区的大小，默认32M</p>\n</li>\n</ul>\n<p>比喻：包裹大小，仓库大小和快递车的等待时间</p>\n<p>配置方法：在main中对<strong>properties</strong>进行配置</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// batch.size：批次大小，默认 16K</span>\n properties<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProducerConfig</span><span class=\"token punctuation\">.</span>BATCH_SIZE_CONFIG<span class=\"token punctuation\">,</span> <span class=\"token number\">16384</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">// linger.ms：等待时间，默认 0</span>\n properties<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProducerConfig</span><span class=\"token punctuation\">.</span>LINGER_MS_CONFIG<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">// RecordAccumulator：缓冲区大小，默认 32M：buffer.memory</span>\n properties<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProducerConfig</span><span class=\"token punctuation\">.</span>BUFFER_MEMORY_CONFIG<span class=\"token punctuation\">,</span> <span class=\"token number\">33554432</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token comment\">// compression.type：压缩，默认 none，可配置值 gzip、snappy、lz4 和 zstd</span>\nproperties<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProducerConfig</span><span class=\"token punctuation\">.</span>COMPRESSION_TYPE_CONFIG<span class=\"token punctuation\">,</span><span class=\"token string\">\"snappy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>还有压缩方式：compression.type，企业中一般使用snappy</p>\n<h2 id=\"3-6-生产经验——数据可靠性\"><a href=\"#3-6-生产经验——数据可靠性\" class=\"headerlink\" title=\"3.6 生产经验——数据可靠性\"></a>3.6 生产经验——数据可靠性</h2><p><strong>数据完全可靠条件：ACK &#x3D; -1 + 分区副本 &gt;&#x3D; 2 + ISR里应答的最小副本 &gt;&#x3D; 2</strong><br>所谓的ISR就是一个还活着的人的群聊，如果一个人长时间不吭声，那就把它踢出群聊<br>数据重复分析：producer发给了leader，然后ack此时&#x3D;-1，leader向Follower同步，然后再同步给了Follower后leader挂掉了，然后此时会重新选举一个leader，然后因为leader并没有向producer发送我已经接受完毕的消息，这个时候producer会再发一次，如果刚刚的Follower当上了leader那么数据就会发生重复</p>\n<h2 id=\"3-7-生产经验——数据去重\"><a href=\"#3-7-生产经验——数据去重\" class=\"headerlink\" title=\"3.7 生产经验——数据去重\"></a>3.7 生产经验——数据去重</h2><h3 id=\"3-7-1-概念\"><a href=\"#3-7-1-概念\" class=\"headerlink\" title=\"3.7.1 概念\"></a>3.7.1 概念</h3><p>幂等性与事务：</p>\n<h3 id=\"3-7-2-幂等性\"><a href=\"#3-7-2-幂等性\" class=\"headerlink\" title=\"3.7.2 幂等性\"></a>3.7.2 幂等性</h3><ol>\n<li>幂等性原理</li>\n</ol>\n<p>幂等性：保证producer发送给broker端的数据的不重复</p>\n<p>精确一次：幂等性 + 数据可靠条件</p>\n<p>重复数据判断的依据：&lt;PID, Partition, SeqNumber&gt;</p>\n<p>PID是kafka启动时分配一个新的，代表了一次会话，Partition是分区，代表了一个分区，SeqNumber是对数据的标号，精准定位了一个数据，如果这个向量完全一致那么就是重复数据，就会被在内存中干掉</p>\n<p>tips：只能判断单次会话（启停一次kafka集群）</p>\n<ol start=\"2\">\n<li>如何开启</li>\n</ol>\n<p>默认开启<code>enable.idempotence = true/false</code></p>\n<h3 id=\"3-7-3-生产者事务\"><a href=\"#3-7-3-生产者事务\" class=\"headerlink\" title=\"3.7.3 生产者事务\"></a>3.7.3 生产者事务</h3><p><img src=\"https://gitee.com/cencus/blog-image/raw/master/blogImage/1648697742215.png\"></p>\n<p>依然在解决重复数据，开启了幂等性只能保证单次会话，而事务就是在填补这个坑</p>\n<p>Kafka事务的API</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//初始化事物</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">initTransactions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//开启事物</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">beginTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ProducerFencedException</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//提交事务</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">commitTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ProducerFencedException</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//在事务内提交已经消费的偏移量，用于消费者</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sendOffsetsToTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">//放弃事务，类似回滚</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">abortTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ProducerFencedException</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>atguigu<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>producer</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>producer<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">KafkaProducer</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>producer<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ProducerConfig</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>producer<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ProducerRecord</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>kafka<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span>serialization<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StringSerializer</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Properties</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomProducerTransaction</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//0. 配置</span>\n        <span class=\"token class-name\">Properties</span> properties <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//连接集群BOOTSTRAP_SERVERS_CONFIG等于--bootstrap-server后面的配置</span>\n        properties<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProducerConfig</span><span class=\"token punctuation\">.</span>BOOTSTRAP_SERVERS_CONFIG<span class=\"token punctuation\">,</span><span class=\"token string\">\"hadoop102:9092,hadoop103:9092\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//指定key:value \"key.serializer\";</span>\n<span class=\"token comment\">//        properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,\"org.apache.kafka.common.serialization.StringSerializer\");</span>\n        properties<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProducerConfig</span><span class=\"token punctuation\">.</span>KEY_SERIALIZER_CLASS_CONFIG<span class=\"token punctuation\">,</span> <span class=\"token class-name\">StringSerializer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        properties<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProducerConfig</span><span class=\"token punctuation\">.</span>VALUE_SERIALIZER_CLASS_CONFIG<span class=\"token punctuation\">,</span> <span class=\"token class-name\">StringSerializer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//指定事务id</span>\n        properties<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProducerConfig</span><span class=\"token punctuation\">.</span>TRANSACTIONAL_ID_CONFIG<span class=\"token punctuation\">,</span><span class=\"token string\">\"transaction01\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token comment\">//1. 创建kafka生产消费者</span>\n        <span class=\"token comment\">// \"\" string</span>\n        <span class=\"token class-name\">KafkaProducer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">KafkaProducer</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">KafkaProducer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>properties<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//初始化事物</span>\n        <span class=\"token class-name\">KafkaProducer</span><span class=\"token punctuation\">.</span><span class=\"token function\">initTransactions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//开启事务</span>\n        <span class=\"token class-name\">KafkaProducer</span><span class=\"token punctuation\">.</span><span class=\"token function\">beginTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//2. 发送数据</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token class-name\">KafkaProducer</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ProducerRecord</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"first\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"atguigu\"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token comment\">//发送数据结束提交事务</span>\n\n<span class=\"token comment\">//            i = 1 / 0;</span>\n\n            <span class=\"token class-name\">KafkaProducer</span><span class=\"token punctuation\">.</span><span class=\"token function\">commitTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//发送失败，终止事务，回滚事务</span>\n            <span class=\"token class-name\">KafkaProducer</span><span class=\"token punctuation\">.</span><span class=\"token function\">abortTransaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">//3. 关闭资源</span>\n            <span class=\"token class-name\">KafkaProducer</span><span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"3-8-生产经验——数据有序\"><a href=\"#3-8-生产经验——数据有序\" class=\"headerlink\" title=\"3.8 生产经验——数据有序\"></a>3.8 生产经验——数据有序</h2><h2 id=\"3-9-生产经验——数据乱序（面试开发重点）\"><a href=\"#3-9-生产经验——数据乱序（面试开发重点）\" class=\"headerlink\" title=\"3.9 生产经验——数据乱序（面试开发重点）\"></a>3.9 生产经验——数据乱序（面试开发重点）</h2><p>如何保证单分区有序？</p>\n<table>\n<thead>\n<tr>\n<th>kafka1.x 以前</th>\n<th>kafka1.x 以后</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>max.in.flight.requests.per.connection=1</code><br />不需要考虑是否开启幂等性</td>\n<td>未开启幂等性 <code>max.in.flight.requests.per.connection</code>需要设置为1<br /><br />开启幂等性 <code>max.in.flight.requests.per.connection</code>需要设置小于等于5。</td>\n</tr>\n</tbody></table>\n<p>为何开启幂等性可以保证5个以内的数据有序</p>\n<p>kafka服务端会缓存producer发来的最近5个request的<strong>元数据</strong>（对于序号正常的数据（商品）可以直接落盘（上架），对于序号不正确的商品就等到5个来齐了，从序号不对的地方开始进行排序，完了之后再上架）</p>\n<h1 id=\"第4章-kafka-broker\"><a href=\"#第4章-kafka-broker\" class=\"headerlink\" title=\"第4章 kafka broker\"></a>第4章 kafka broker</h1><h2 id=\"4-1-kafka-broker的工作流程\"><a href=\"#4-1-kafka-broker的工作流程\" class=\"headerlink\" title=\"4.1 kafka broker的工作流程\"></a>4.1 kafka broker的工作流程</h2><h3 id=\"4-1-1-zookeeper存储的kafka信息\"><a href=\"#4-1-1-zookeeper存储的kafka信息\" class=\"headerlink\" title=\"4.1.1 zookeeper存储的kafka信息\"></a>4.1.1 zookeeper存储的kafka信息</h3><ol>\n<li><p>broker.ids</p>\n</li>\n<li><p>leader</p>\n</li>\n<li><p>辅助选举的control谁能抢到谁就是leader</p>\n</li>\n</ol>\n<h3 id=\"4-1-2-broker的工作流程\"><a href=\"#4-1-2-broker的工作流程\" class=\"headerlink\" title=\"4.1.2 broker的工作流程\"></a>4.1.2 broker的工作流程</h3><p><img src=\"https://gitee.com/cencus/blog-image/raw/master/blogImage/1648824435251.png\"></p>\n<ul>\n<li>集群启动后，向zk注册，讲我还活着，</li>\n<li>然后就开始选老大，谁先坐上zk里面controller控制者的宝座，谁就当选leader，</li>\n<li>选出来的controller就监控broker的变化，并且把相应的信息写入到zk，</li>\n<li>然后其他节点就从该节点去认识自己的兄弟们，</li>\n<li>假设原来的leader挂掉了，那么controller就会知道，然后又开始组织新一轮的选举，并且去更新相应的信息</li>\n</ul>\n<h3 id=\"4-1-3-broker重要参数\"><a href=\"#4-1-3-broker重要参数\" class=\"headerlink\" title=\"4.1.3 broker重要参数\"></a>4.1.3 broker重要参数</h3><p>略</p>\n<h2 id=\"4-2-生成经验——节点服役与退役\"><a href=\"#4-2-生成经验——节点服役与退役\" class=\"headerlink\" title=\"4.2 生成经验——节点服役与退役\"></a>4.2 生成经验——节点服役与退役</h2><h3 id=\"4-2-1-服役新节点\"><a href=\"#4-2-1-服役新节点\" class=\"headerlink\" title=\"4.2.1 服役新节点\"></a>4.2.1 服役新节点</h3><p>1、 准备一个新的服务器，安装有Java，kafka等等环境</p>\n<p>2、配置新的服务器</p>\n<p><code>vim KAFKA_HOME/conf/server.properties</code></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#broker.id 必须要改\nbroker.id&#x3D;105\nlog.dirs&#x3D;&#x2F;opt&#x2F;module&#x2F;kafka&#x2F;datas\nzookeeper.connect&#x3D;hadoop102:2181,hadoop103:2181,hadoop104:2181&#x2F;kafka<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>3、执行负载均衡</p>\n<p>3.1、创建一个要均衡的主题<code>vim topics-to-move.json</code></p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>\n <span class=\"token property\">\"topics\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n <span class=\"token punctuation\">&#123;</span><span class=\"token property\">\"topic\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"first\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token property\">\"topic\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"second\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span>\n <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>3.2、创建执行计划</p>\n<p>bin/kafka-reassign-partitions.sh -- bootstrap-server <span style=\"color:red\">hadoop102:9092</span> --topics-to-move-json-file  <span style=\"color:green\">topics-to-move.json</span> --broker-list <span style=\"color:red\">\"102,103,104,105\"</span> --generate</p>\n\n<p>执行结束出现一下内容</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Current partition replica assignment\n&#123;&quot;version&quot;:1,&quot;partitions&quot;:[&#123;&quot;topic&quot;:&quot;first&quot;,&quot;partition&quot;:0,&quot;replicas&quot;:[103,102,104],&quot;log_dirs&quot;:[&quot;any&quot;,&quot;any&quot;,&quot;any&quot;]&#125;,&#123;&quot;topic&quot;:&quot;first&quot;,&quot;partition&quot;:1,&quot;replicas&quot;:[104,103,105],&quot;log_dirs&quot;:[&quot;any&quot;,&quot;any&quot;,&quot;any&quot;]&#125;,&#123;&quot;topic&quot;:&quot;first&quot;,&quot;partition&quot;:2,&quot;replicas&quot;:[105,104,102],&quot;log_dirs&quot;:[&quot;any&quot;,&quot;any&quot;,&quot;any&quot;]&#125;]&#125;\n\nProposed partition reassignment configuration\n&#123;&quot;version&quot;:1,&quot;partitions&quot;:[&#123;&quot;topic&quot;:&quot;first&quot;,&quot;partition&quot;:0,&quot;replicas&quot;:[102,104,103],&quot;log_dirs&quot;:[&quot;any&quot;,&quot;any&quot;,&quot;any&quot;]&#125;,&#123;&quot;topic&quot;:&quot;first&quot;,&quot;partition&quot;:1,&quot;replicas&quot;:[103,102,104],&quot;log_dirs&quot;:[&quot;any&quot;,&quot;any&quot;,&quot;any&quot;]&#125;,&#123;&quot;topic&quot;:&quot;first&quot;,&quot;partition&quot;:2,&quot;replicas&quot;:[104,103,102],&quot;log_dirs&quot;:[&quot;any&quot;,&quot;any&quot;,&quot;any&quot;]&#125;]&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>复制Proposed partition reassignment configuration以下的内容</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#123;&quot;version&quot;:1,&quot;partitions&quot;:[&#123;&quot;topic&quot;:&quot;first&quot;,&quot;partition&quot;:0,&quot;replicas&quot;:[102,104,103],&quot;log_dirs&quot;:[&quot;any&quot;,&quot;any&quot;,&quot;any&quot;]&#125;,&#123;&quot;topic&quot;:&quot;first&quot;,&quot;partition&quot;:1,&quot;replicas&quot;:[103,102,104],&quot;log_dirs&quot;:[&quot;any&quot;,&quot;any&quot;,&quot;any&quot;]&#125;,&#123;&quot;topic&quot;:&quot;first&quot;,&quot;partition&quot;:2,&quot;replicas&quot;:[104,103,102],&quot;log_dirs&quot;:[&quot;any&quot;,&quot;any&quot;,&quot;any&quot;]&#125;]&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>创建创建副本存储计划：<code>vim increase-replication-factor.json</code></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#按i插入刚刚复制的内容\n&#123;&quot;version&quot;:1,&quot;partitions&quot;:[&#123;&quot;topic&quot;:&quot;first&quot;,&quot;partition&quot;:0,&quot;replicas&quot;:[102,104,103],&quot;log_dirs&quot;:[&quot;any&quot;,&quot;any&quot;,&quot;any&quot;]&#125;,&#123;&quot;topic&quot;:&quot;first&quot;,&quot;partition&quot;:1,&quot;replicas&quot;:[103,102,104],&quot;log_dirs&quot;:[&quot;any&quot;,&quot;any&quot;,&quot;any&quot;]&#125;,&#123;&quot;topic&quot;:&quot;first&quot;,&quot;partition&quot;:2,&quot;replicas&quot;:[104,103,102],&quot;log_dirs&quot;:[&quot;any&quot;,&quot;any&quot;,&quot;any&quot;]&#125;]&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>执行副本存储计划</p>\n<p>bin/kafka-reassign-partitions.sh -- bootstrap-server <span style=\"color:red\">hadoop102:9092</span> --reassignment-json-file <span style=\"color:red\">increase-replication-factor.json</span>  --execute</p>\n\n<p>验证副本存储计划</p>\n<p>bin/kafka-reassign-partitions.sh -- bootstrap-server <span style=\"color:red\">hadoop102:9092</span> --reassignment-json-file <span style=\"color:red\">increase-replication-factor.json</span>  --verify</p>\n\n\n\n<h3 id=\"4-2-2-退役旧节点\"><a href=\"#4-2-2-退役旧节点\" class=\"headerlink\" title=\"4.2.2 退役旧节点\"></a>4.2.2 退役旧节点</h3><p>a、创建一个均衡主题</p>\n<p><code>[atguigu@hadoop102 kafka]$ vim topics-to-move.json</code></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#123;\n &quot;topics&quot;: [\n &#123;&quot;topic&quot;: &quot;first&quot;&#125;\n ],\n &quot;version&quot;: 1\n&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>b、创建执行计划</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">bin&#x2F;kafka-reassign-partitions.sh --bootstrap-server hadoop102:9092 --topics-to-move-json-file topics-to-move.json --broker-list &quot;0,1,2&quot; --generate\n\nCurrent partition replica assignment\n&#123;&quot;version&quot;:1,&quot;partitions&quot;:[&#123;&quot;topic&quot;:&quot;first&quot;,&quot;partition&quot;:0,&quot;replic\nas&quot;:[2,0,1],&quot;log_dirs&quot;:[&quot;any&quot;,&quot;any&quot;,&quot;any&quot;]&#125;,&#123;&quot;topic&quot;:&quot;first&quot;,&quot;par\ntition&quot;:1,&quot;replicas&quot;:[3,1,2],&quot;log_dirs&quot;:[&quot;any&quot;,&quot;any&quot;,&quot;any&quot;]&#125;,&#123;&quot;to\npic&quot;:&quot;first&quot;,&quot;partition&quot;:2,&quot;replicas&quot;:[0,2,3],&quot;log_dirs&quot;:[&quot;any&quot;,&quot;\nany&quot;,&quot;any&quot;]&#125;]&#125;\nProposed partition reassignment configuration\n&#123;&quot;version&quot;:1,&quot;partitions&quot;:[&#123;&quot;topic&quot;:&quot;first&quot;,&quot;partition&quot;:0,&quot;replicas&quot;:[2,0,1],&quot;log_dirs&quot;:[&quot;any&quot;,&quot;any&quot;,&quot;any&quot;]&#125;,&#123;&quot;topic&quot;:&quot;first&quot;,&quot;par\ntition&quot;:1,&quot;replicas&quot;:[0,1,2],&quot;log_dirs&quot;:[&quot;any&quot;,&quot;any&quot;,&quot;any&quot;]&#125;,&#123;&quot;to\npic&quot;:&quot;first&quot;,&quot;partition&quot;:2,&quot;replicas&quot;:[1,2,0],&quot;log_dirs&quot;:[&quot;any&quot;,&quot;\nany&quot;,&quot;any&quot;]&#125;]&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>c、创建副本存储计划</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[atguigu@hadoop102 kafka]$ vim increase-replication-factor.json\n\n\n&#123;&quot;version&quot;:1,&quot;partitions&quot;:[&#123;&quot;topic&quot;:&quot;first&quot;,&quot;partition&quot;:0,&quot;replic\nas&quot;:[2,0,1],&quot;log_dirs&quot;:[&quot;any&quot;,&quot;any&quot;,&quot;any&quot;]&#125;,&#123;&quot;topic&quot;:&quot;first&quot;,&quot;par\ntition&quot;:1,&quot;replicas&quot;:[0,1,2],&quot;log_dirs&quot;:[&quot;any&quot;,&quot;any&quot;,&quot;any&quot;]&#125;,&#123;&quot;to\npic&quot;:&quot;first&quot;,&quot;partition&quot;:2,&quot;replicas&quot;:[1,2,0],&quot;log_dirs&quot;:[&quot;any&quot;,&quot;\nany&quot;,&quot;any&quot;]&#125;]&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>d、执行副本存储计划</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">bin&#x2F;kafka-reassign-partitions.sh --bootstrap-server hadoop102:9092 --reassignment-json-file increase-replication-factor.json --execute<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>e、验证副本存储计划</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[atguigu@hadoop102 kafka]$ bin&#x2F;kafka-reassign-partitions.sh --bootstrap-server hadoop102:9092 --reassignment-json-fileincrease-replication-factor.json --verify\n\n\nStatus of partition reassignment:\nReassignment of partition first-0 is complete.\nReassignment of partition first-1 is complete.\nReassignment of partition first-2 is complete.\nClearing broker-level throttles on brokers 0,1,2,3\nClearing topic-level throttles on topic first<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"4-3-Kafka副本\"><a href=\"#4-3-Kafka副本\" class=\"headerlink\" title=\"4.3 Kafka副本\"></a>4.3 Kafka副本</h2><h3 id=\"4-3-1-副本基本信息\"><a href=\"#4-3-1-副本基本信息\" class=\"headerlink\" title=\"4.3.1 副本基本信息\"></a>4.3.1 副本基本信息</h3><ul>\n<li><p>AR：所有副本统称</p>\n</li>\n<li><p>ISR：还喘气的</p>\n</li>\n<li><p>OSR：over了的喘不了气了</p>\n</li>\n</ul>\n<h3 id=\"4-3-2-leader选举流程\"><a href=\"#4-3-2-leader选举流程\" class=\"headerlink\" title=\"4.3.2 leader选举流程\"></a>4.3.2 leader选举流程</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// ar=[1,0,2];</span>\n<span class=\"token comment\">// isr =[0,1,2]</span>\n\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>ar<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> ar<span class=\"token punctuation\">.</span><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> not in isr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    ar<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>ar排在前的活着的成为leader</strong></p>\n<h3 id=\"4-3-3-leader和Follower故障处理细节（超级系）\"><a href=\"#4-3-3-leader和Follower故障处理细节（超级系）\" class=\"headerlink\" title=\"4.3.3 leader和Follower故障处理细节（超级系）\"></a>4.3.3 leader和Follower故障处理细节（超级系）</h3><p>LEO(log end offset)：每个副本的最后一个offset，leo &#x3D; offset + 1</p>\n<p>HW（high watermark）：副本中最小的leo（也就是最小的offset）（也就是木桶最短的那一个）</p>\n<p>一、Follower故障</p>\n<ol>\n<li>提出群聊isr</li>\n<li>其他人正常工作</li>\n<li>Follower恢复后，会读取上次的HW，并将log高于HW的位置截掉然后从HW开始向leader同步</li>\n<li>等Follower的leo大于等于该partition的leader的HW时，就是追上来了，就可以重新假如ISR</li>\n</ol>\n<p>一句话：HW就是抄的最慢的人抄到哪里了，某个broker的LEO就是就是这个人写到哪里了，故障了恢复了就从抄的最慢的人那里开始抄到leader到的那里</p>\n<p>二、leader故障</p>\n<ol>\n<li>重选leader</li>\n<li>然后让所有Follower向我看齐</li>\n</ol>\n<p>一句话：谁当皇帝，谁敢比我抄的多卷子给他撕了。</p>\n<h3 id=\"4-3-4-分区副本分配（副本在broker中怎么存储）\"><a href=\"#4-3-4-分区副本分配（副本在broker中怎么存储）\" class=\"headerlink\" title=\"4.3.4 分区副本分配（副本在broker中怎么存储）\"></a>4.3.4 分区副本分配（副本在broker中怎么存储）</h3><p>思考：负载均衡 + 可靠性</p>\n<p>好你已经可以当架构师了</p>\n<p>就是这样，保证前面两条</p>\n<h3 id=\"4-3-5-生产经验——手动调整分区副本存储\"><a href=\"#4-3-5-生产经验——手动调整分区副本存储\" class=\"headerlink\" title=\"4.3.5 生产经验——手动调整分区副本存储\"></a>4.3.5 生产经验——手动调整分区副本存储</h3><p>人话：就是我想把副本存在哪儿怎么存我就存在哪儿怎么存</p>\n<p>步骤：</p>\n<p>1、创建副本存储计划</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[atguigu@hadoop102 kafka]$ vim increase-replication-factor.json\n&#123;\n&quot;version&quot;:1,\n&quot;partitions&quot;:[&#123;&quot;topic&quot;:&quot;three&quot;,&quot;partition&quot;:0,&quot;replicas&quot;:[0,1]&#125;,\n&#123;&quot;topic&quot;:&quot;three&quot;,&quot;partition&quot;:1,&quot;replicas&quot;:[0,1]&#125;,\n&#123;&quot;topic&quot;:&quot;three&quot;,&quot;partition&quot;:2,&quot;replicas&quot;:[1,0]&#125;,\n&#123;&quot;topic&quot;:&quot;three&quot;,&quot;partition&quot;:3,&quot;replicas&quot;:[1,0]&#125;]\n&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>2、执行</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">bin&#x2F;kafka-reassign-partitions.sh --bootstrap-server hadoop102:9092 --reassignment-json-file increase-replication-factor.json --execute<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<p>3、验证</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">bin&#x2F;kafka-reassign-partitions.sh --bootstrap-server hadoop102:9092 --reassignment-json-file increase-replication-factor.json --verify<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<p>4、查看</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">bin&#x2F;kafka-topics.sh --bootstrap-server hadoop102:9092 --describe --topic three<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h3 id=\"4-3-6-Leader-partition-负载平衡\"><a href=\"#4-3-6-Leader-partition-负载平衡\" class=\"headerlink\" title=\"4.3.6 Leader partition 负载平衡\"></a>4.3.6 Leader partition 负载平衡</h3><p>正常情况下，Kafka本身会自动把Leader Partition均匀分散在各个机器上，来保证每台机器的读写吞吐量都是均匀的。但是如果<strong>某些broker宕机，会导致Leader Partition过于集中在其他少部分几台broker上</strong>，这会导致少数几台broker的读写请求压力过高，其他宕机的 broker重启之后都是follower partition，读写请求很低，<strong>造成集群负载不均衡</strong>。</p>\n<ul>\n<li>auto.leader.rebalance.enable，默认是true。 自动Leader Partition 平衡 </li>\n<li>leader.imbalance.per.broker.percentage， 默认是10%。每个broker允许的不平衡 的leader的比率。如果每个broker超过 了这个值，控制器会触发leader的平衡。</li>\n<li>leader.imbalance.check.interval.seconds， 默认值300秒。检查leader负载是否平衡 的间隔时间。</li>\n</ul>\n<p>某一个节点的不平衡率：</p>\n<p><img src=\"https://gitee.com/cencus/blog-image/raw/master/blogImage/1649136188042.png\"></p>\n<p>比如计算节点broker0的平衡率 ，首先要知道AR的长度为4，然后需要找到不平衡数：遍历所有分区，找到所有AR的首位是0但是leader不是0的，也就是应该当leader而没有当的，图中为1，则计算平衡率为 1&#x2F;4 &#x3D; 25% ，很明显需要触发leader partition平衡</p>\n<p>同理broker1计算应为 0</p>\n<p><strong>但是我们能够看到图中依然是均衡的（leader均匀分布在集群），所以其实并不需要做负载均衡，同时触发再平衡还会消耗性能，一般都不会使用，就算是使用也会将<code>leader.imbalance.per.broker.percentage</code>调整到45%</strong></p>\n<h3 id=\"4-3-7-生产经验——增加副本因子\"><a href=\"#4-3-7-生产经验——增加副本因子\" class=\"headerlink\" title=\"4.3.7 生产经验——增加副本因子\"></a>4.3.7 生产经验——增加副本因子</h3><p>需求：提高某个主题的replication数</p>\n<p>操作：无法通过命令行，只能通过计划</p>\n<p>1、手动增加副本存储</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[atguigu@hadoop102 kafka]$ vim increase-replication-factor.json<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>2、粘贴内容</p>\n<p>3、执行副本存储计划</p>\n","text":"第一章 生产商，超市与消费者的爱恨情仇 1. 定义分布式，发布订阅，消息队列 2. 消息队列的应用场景 缓存消峰 解耦 异步通信 3.两种模式 点对点（一个生产者 一个消费者 一个主题 会删除数据） 发布订阅模式（多个生产者，多个消费者而且相互独立，多个主题，不会删除数据） 点对...","link":"","photos":[],"count_time":{"symbolsCount":"21k","symbolsTime":"19 mins."},"categories":[],"tags":[{"name":"大数据","slug":"大数据","count":3,"path":"api/tags/大数据.json"},{"name":"kafka","slug":"kafka","count":1,"path":"api/tags/kafka.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%80%E7%AB%A0\"><span class=\"toc-text\">第一章</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">1. 定义</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">2. 消息队列的应用场景</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E4%B8%A4%E7%A7%8D%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">3.两种模式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E6%9E%B6%E6%9E%84\"><span class=\"toc-text\">4. 架构</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%8C%E7%AB%A0-kafka%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8\"><span class=\"toc-text\">第二章 kafka快速入门</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">1. 安装</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C\"><span class=\"toc-text\">2.常用命令行</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%B8%89%E7%AB%A0%E3%80%81kafka%E7%94%9F%E4%BA%A7%E8%80%85\"><span class=\"toc-text\">第三章、kafka生产者</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-1-%E7%94%9F%E4%BA%A7%E8%80%85%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">3.1 生产者发送消息流程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-1%E5%8F%91%E9%80%81%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">3.1.1发送原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-2-%E9%87%8D%E8%A6%81%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">3.1.2 重要参数</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-2-%E5%BC%82%E6%AD%A5%E5%8F%91%E9%80%81API\"><span class=\"toc-text\">3.2 异步发送API</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-2-%E5%B8%A6%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E7%9A%84%E5%BC%82%E6%AD%A5%E5%8F%91%E9%80%81\"><span class=\"toc-text\">3.2.2 带回调函数的异步发送</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-3-%E5%90%8C%E6%AD%A5%E5%8F%91%E9%80%81API\"><span class=\"toc-text\">3.3 同步发送API</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-4-%E7%94%9F%E4%BA%A7%E8%80%85%E5%88%86%E5%8C%BA\"><span class=\"toc-text\">3.4 生产者分区</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-4-1-%E5%88%86%E5%8C%BA%E5%A5%BD%E5%A4%84\"><span class=\"toc-text\">3.4.1 分区好处</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-4-2-%E7%94%9F%E4%BA%A7%E8%80%85%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF%E7%9A%84%E5%88%86%E5%8C%BA%E7%AD%96%E7%95%A5\"><span class=\"toc-text\">3.4.2 生产者发送消息的分区策略</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-4-3-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%86%E5%8C%BA%E5%99%A8\"><span class=\"toc-text\">3.4.3 自定义分区器</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-5-%E7%94%9F%E4%BA%A7%E7%BB%8F%E9%AA%8C%E2%80%94%E2%80%94%E5%A6%82%E4%BD%95%E6%8F%90%E9%AB%98%E5%90%9E%E5%90%90%E9%87%8F\"><span class=\"toc-text\">3.5 生产经验——如何提高吞吐量</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-6-%E7%94%9F%E4%BA%A7%E7%BB%8F%E9%AA%8C%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E5%8F%AF%E9%9D%A0%E6%80%A7\"><span class=\"toc-text\">3.6 生产经验——数据可靠性</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-7-%E7%94%9F%E4%BA%A7%E7%BB%8F%E9%AA%8C%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E5%8E%BB%E9%87%8D\"><span class=\"toc-text\">3.7 生产经验——数据去重</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-7-1-%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">3.7.1 概念</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-7-2-%E5%B9%82%E7%AD%89%E6%80%A7\"><span class=\"toc-text\">3.7.2 幂等性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-7-3-%E7%94%9F%E4%BA%A7%E8%80%85%E4%BA%8B%E5%8A%A1\"><span class=\"toc-text\">3.7.3 生产者事务</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-8-%E7%94%9F%E4%BA%A7%E7%BB%8F%E9%AA%8C%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E6%9C%89%E5%BA%8F\"><span class=\"toc-text\">3.8 生产经验——数据有序</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-9-%E7%94%9F%E4%BA%A7%E7%BB%8F%E9%AA%8C%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E4%B9%B1%E5%BA%8F%EF%BC%88%E9%9D%A2%E8%AF%95%E5%BC%80%E5%8F%91%E9%87%8D%E7%82%B9%EF%BC%89\"><span class=\"toc-text\">3.9 生产经验——数据乱序（面试开发重点）</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AC%AC4%E7%AB%A0-kafka-broker\"><span class=\"toc-text\">第4章 kafka broker</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-1-kafka-broker%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">4.1 kafka broker的工作流程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-1-1-zookeeper%E5%AD%98%E5%82%A8%E7%9A%84kafka%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">4.1.1 zookeeper存储的kafka信息</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-1-2-broker%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">4.1.2 broker的工作流程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-1-3-broker%E9%87%8D%E8%A6%81%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">4.1.3 broker重要参数</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-2-%E7%94%9F%E6%88%90%E7%BB%8F%E9%AA%8C%E2%80%94%E2%80%94%E8%8A%82%E7%82%B9%E6%9C%8D%E5%BD%B9%E4%B8%8E%E9%80%80%E5%BD%B9\"><span class=\"toc-text\">4.2 生成经验——节点服役与退役</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-2-1-%E6%9C%8D%E5%BD%B9%E6%96%B0%E8%8A%82%E7%82%B9\"><span class=\"toc-text\">4.2.1 服役新节点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-2-2-%E9%80%80%E5%BD%B9%E6%97%A7%E8%8A%82%E7%82%B9\"><span class=\"toc-text\">4.2.2 退役旧节点</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-3-Kafka%E5%89%AF%E6%9C%AC\"><span class=\"toc-text\">4.3 Kafka副本</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-3-1-%E5%89%AF%E6%9C%AC%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">4.3.1 副本基本信息</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-3-2-leader%E9%80%89%E4%B8%BE%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">4.3.2 leader选举流程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-3-3-leader%E5%92%8CFollower%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86%E7%BB%86%E8%8A%82%EF%BC%88%E8%B6%85%E7%BA%A7%E7%B3%BB%EF%BC%89\"><span class=\"toc-text\">4.3.3 leader和Follower故障处理细节（超级系）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-3-4-%E5%88%86%E5%8C%BA%E5%89%AF%E6%9C%AC%E5%88%86%E9%85%8D%EF%BC%88%E5%89%AF%E6%9C%AC%E5%9C%A8broker%E4%B8%AD%E6%80%8E%E4%B9%88%E5%AD%98%E5%82%A8%EF%BC%89\"><span class=\"toc-text\">4.3.4 分区副本分配（副本在broker中怎么存储）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-3-5-%E7%94%9F%E4%BA%A7%E7%BB%8F%E9%AA%8C%E2%80%94%E2%80%94%E6%89%8B%E5%8A%A8%E8%B0%83%E6%95%B4%E5%88%86%E5%8C%BA%E5%89%AF%E6%9C%AC%E5%AD%98%E5%82%A8\"><span class=\"toc-text\">4.3.5 生产经验——手动调整分区副本存储</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-3-6-Leader-partition-%E8%B4%9F%E8%BD%BD%E5%B9%B3%E8%A1%A1\"><span class=\"toc-text\">4.3.6 Leader partition 负载平衡</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-3-7-%E7%94%9F%E4%BA%A7%E7%BB%8F%E9%AA%8C%E2%80%94%E2%80%94%E5%A2%9E%E5%8A%A0%E5%89%AF%E6%9C%AC%E5%9B%A0%E5%AD%90\"><span class=\"toc-text\">4.3.7 生产经验——增加副本因子</span></a></li></ol></li></ol></li></ol>","author":{"name":"Cencus","slug":"blog-author","avatar":"https://gitee.com/cencus/blog-image/raw/master/blogImage/1648381409561.jpg","link":"/","description":"stay hungry, stay foolish.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"linux学习笔记","uid":"c42ea271ec848445301016f3b979e666","slug":"linux学习笔记","date":"2022-03-29T15:15:42.000Z","updated":"2022-03-29T15:18:37.714Z","comments":true,"path":"api/articles/linux学习笔记.json","keywords":null,"cover":[],"text":" 基础指令指令格式指令体 参数 位置 1、ls——列出路径： 相对路径：有一个参照物——当前工作目录，**..&#x2F;代表返回上级目录，.&#x2F;代表当前目录绝对路径：以&#x2F;**开头的写法 参数 a：all列出所有，包括隐藏文件（以**.**开头的文件）各列属性解...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"大数据","slug":"大数据","count":3,"path":"api/tags/大数据.json"}],"author":{"name":"Cencus","slug":"blog-author","avatar":"https://gitee.com/cencus/blog-image/raw/master/blogImage/1648381409561.jpg","link":"/","description":"stay hungry, stay foolish.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"正则","uid":"f9e7089c97c02add0e0305f89cbc4548","slug":"正则","date":"2022-03-28T10:12:04.000Z","updated":"2022-03-28T10:12:25.928Z","comments":true,"path":"api/articles/正则.json","keywords":null,"cover":null,"text":"工具http://regex101.com页面解读 限定符匹配对象是一个字符 符号 解释 ? 限定符，前面的字符要出现0次或者[1]次,&#x2F;used?代表d出现0次或者1次，也就是可有可无 | 前面的字符要出现0和或者多次 +|匹配出现1次以上的字符{}|指定前面字符出现...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"default","slug":"default","count":1,"path":"api/tags/default.json"}],"author":{"name":"Cencus","slug":"blog-author","avatar":"https://gitee.com/cencus/blog-image/raw/master/blogImage/1648381409561.jpg","link":"/","description":"stay hungry, stay foolish.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}