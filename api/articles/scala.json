{"title":"scala","uid":"a5d8f8aa75a85d4533d622d4e92bd3f1","slug":"scala","date":"2022-04-05T07:52:16.000Z","updated":"2022-04-09T11:04:15.302Z","comments":true,"path":"api/articles/scala.json","keywords":null,"cover":null,"content":"<h1 id=\"第1章-入门\"><a href=\"#第1章-入门\" class=\"headerlink\" title=\"第1章  入门\"></a>第1章  入门</h1><p>基于JVM，与Java关系密切</p>\n<p>Java是一门先编译后解释的语言</p>\n<p>Scala与java一样</p>\n<p>特点：融合怪</p>\n<p>面向对象 函数式编程 静态类型（类型提前声明指定）编程语言</p>\n<ol>\n<li>多范式  结合了面对对象与函数式编程</li>\n<li><code>.scala</code>会被编译为java字节码<code>.class</code>，然后运行在JVM之上，并可以调用现有的Java类库，实现两种语言的无缝对接</li>\n</ol>\n<p>环境搭建步骤</p>\n<ol>\n<li>确保有Java</li>\n<li><a href=\"https://www.scala-lang.org/download/2.12.1.html\">https://www.scala-lang.org/download/2.12.1.html</a> 下载scala2.12.1.zip文件</li>\n<li>解压配置环境变量</li>\n</ol>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>编译：<code>scalac xxx.scala</code></p>\n<p>执行：<code>scala xxx</code></p>\n<p>编译生成了两个文件xxx.class和xxx$.class</p></blockquote>\n<h1 id=\"第2章-变量和数据类型\"><a href=\"#第2章-变量和数据类型\" class=\"headerlink\" title=\"第2章 变量和数据类型\"></a>第2章 变量和数据类型</h1><h2 id=\"2-1注释\"><a href=\"#2-1注释\" class=\"headerlink\" title=\"2.1注释\"></a>2.1注释</h2><p>变量与常量</p>\n<p>能够用常量就不要用变量</p>\n<pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\">```\n\n## <span class=\"token number\">2.4</span> 字符串输出\n\n```scala\n<span class=\"token comment\">//全代码</span>\n<span class=\"token keyword\">package</span> <span class=\"token namespace\">chapter02</span>\n\n<span class=\"token keyword\">object</span> Test04_String <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">def</span> main<span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">val</span> age <span class=\"token operator\">=</span> <span class=\"token number\">18</span>\n    <span class=\"token keyword\">val</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"欧婉华\"</span>\n    <span class=\"token comment\">//printf，占位符，%d,%s，例如printf(\"%d岁的%s在尚硅谷学习\",age,name)</span>\n\n\n    <span class=\"token comment\">//字符串模板(+插值字符串，通过$获取变量值)，上面的太麻烦了，直接把变量引用到字符串内容中</span>\n    <span class=\"token comment\">//格式：print(s\"$&#123;var&#125;\")</span>\n    println<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token id function\">s</span><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">$&#123;</span><span class=\"token expression\">age</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">岁的</span><span class=\"token interpolation\"><span class=\"token punctuation\">$&#123;</span><span class=\"token expression\">name</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">喜欢小狗\"</span></span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">val</span> num<span class=\"token operator\">:</span><span class=\"token builtin\">Double</span> <span class=\"token operator\">=</span> <span class=\"token number\">3.1415</span>\n    println<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token id function\">s</span><span class=\"token string\">\"The num is </span><span class=\"token interpolation\"><span class=\"token punctuation\">$&#123;</span><span class=\"token expression\">num</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//格式化模板字符串</span>\n    println<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token id function\">f</span><span class=\"token string\">\"The num is </span><span class=\"token interpolation\"><span class=\"token punctuation\">$&#123;</span><span class=\"token expression\">num</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">%2.2f\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//格式化输出</span>\n    println<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token id function\">raw</span><span class=\"token string\">\"The num is </span><span class=\"token interpolation\"><span class=\"token punctuation\">$&#123;</span><span class=\"token expression\">num</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">%2.2f\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//将变量填进来，后面的字符串原来输出</span>\n\n    <span class=\"token comment\">//三引号表示字符串，保持多行字符串的原格式输出</span>\n    <span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token id function\">s</span><span class=\"token string\">\"\"\"\n       |I\n       |Love\n       |Oliva\n       |\"\"\"</span></span><span class=\"token punctuation\">.</span>stripMargin\n    println<span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<h3 id=\"printf-占位符\"><a href=\"#printf-占位符\" class=\"headerlink\" title=\"printf+占位符\"></a>printf+占位符</h3><pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\">printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"%d岁的%s在尚硅谷学习\"</span><span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h3 id=\"插值表达式\"><a href=\"#插值表达式\" class=\"headerlink\" title=\"插值表达式\"></a>插值表达式</h3><pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\">println<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token id function\">s</span><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">$&#123;</span><span class=\"token expression\">age</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">岁的</span><span class=\"token interpolation\"><span class=\"token punctuation\">$&#123;</span><span class=\"token expression\">name</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">喜欢小狗\"</span></span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h3 id=\"格式化输出\"><a href=\"#格式化输出\" class=\"headerlink\" title=\"格式化输出\"></a>格式化输出</h3><pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\">println<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token id function\">f</span><span class=\"token string\">\"The num is </span><span class=\"token interpolation\"><span class=\"token punctuation\">$&#123;</span><span class=\"token expression\">num</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">%2.2f\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//格式化输出</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h3 id=\"不对字符串内的特殊字符做解析\"><a href=\"#不对字符串内的特殊字符做解析\" class=\"headerlink\" title=\"不对字符串内的特殊字符做解析\"></a>不对字符串内的特殊字符做解析</h3><pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\">println<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token id function\">raw</span><span class=\"token string\">\"The num is </span><span class=\"token interpolation\"><span class=\"token punctuation\">$&#123;</span><span class=\"token expression\">num</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">%2.2f\"</span></span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//将变量填进来，后面的字符串原来输出</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"多行字符串的原格式输出\"><a href=\"#多行字符串的原格式输出\" class=\"headerlink\" title=\"多行字符串的原格式输出\"></a>多行字符串的原格式输出</h3><pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\"><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token id function\">s</span><span class=\"token string\">\"\"\"\n       |I\n       |Love\n       |Oliva\n       |\"\"\"</span></span><span class=\"token punctuation\">.</span>stripMargin<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>不会有那个<code>|</code></p>\n<h1 id=\"第3章-忘了是什么章节了\"><a href=\"#第3章-忘了是什么章节了\" class=\"headerlink\" title=\"第3章  忘了是什么章节了\"></a>第3章  忘了是什么章节了</h1><p>和Java没差，没什么可写的</p>\n<h1 id=\"第4章-流程控制\"><a href=\"#第4章-流程控制\" class=\"headerlink\" title=\"第4章  流程控制\"></a>第4章  流程控制</h1><h2 id=\"4-1-if-else\"><a href=\"#4-1-if-else\" class=\"headerlink\" title=\"4.1 if else\"></a>4.1 if else</h2><p>和Java相同的部分就不说了，说一个不一样的，ifelse的返回值，看代码</p>\n<pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\"><span class=\"token keyword\">var</span> a<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>age <span class=\"token operator\">>=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token string\">\"成年\"</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token string\">\"未成年\"</span>\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>返回条件分支的最后一行语句，可以用做三目运算符</p>\n<pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\"><span class=\"token keyword\">val</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>age <span class=\"token operator\">></span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"成年\"</span> <span class=\"token keyword\">else</span> <span class=\"token string\">\"未成年\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n\n\n<h2 id=\"4-2-for循环\"><a href=\"#4-2-for循环\" class=\"headerlink\" title=\"4.2 for循环\"></a>4.2 for循环</h2><h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">&lt;-</span> start to <span class=\"token namespace\">end</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//循环体</span>\n    <span class=\"token comment\">/*\n    i：循环变量，和java里面的i\n    &lt;-：将后面生成的东西依次赋值给i\n    start to end 一种方法调度，start.to(end)，生成一个从start到end的一个集合\n    */</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"范围遍历\"><a href=\"#范围遍历\" class=\"headerlink\" title=\"范围遍历\"></a>范围遍历</h3><pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">&lt;-</span> start to <span class=\"token namespace\">end</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h3 id=\"不想包含结束位置-until\"><a href=\"#不想包含结束位置-until\" class=\"headerlink\" title=\"不想包含结束位置 until\"></a>不想包含结束位置 until</h3><pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token keyword\">&lt;-</span> start until end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这样就不会包含end的集合</p>\n<h3 id=\"foreach的集合遍历\"><a href=\"#foreach的集合遍历\" class=\"headerlink\" title=\"foreach的集合遍历\"></a>foreach的集合遍历</h3><pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\"><span class=\"token comment\">//foreach，集合遍历</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">&lt;-</span> Array<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     println<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">&lt;-</span> List<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     println<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">&lt;-</span> Set<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     println<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<h3 id=\"循环守卫-if\"><a href=\"#循环守卫-if\" class=\"headerlink\" title=\"循环守卫 if\"></a>循环守卫 if</h3><p>听起来很高大上其实就是java里的continue</p>\n<pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">&lt;-</span> <span class=\"token number\">1</span> to <span class=\"token number\">10</span> <span class=\"token keyword\">if</span> i <span class=\"token operator\">!=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tprintln<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>解释：如果i不等于5就执行循环体，否则就执行等价于</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"循环步长-by\"><a href=\"#循环步长-by\" class=\"headerlink\" title=\"循环步长 by\"></a>循环步长 by</h3><pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\"><span class=\"token comment\">//by的类型：正数，负数，小数，但就是不能是0</span>\n<span class=\"token comment\">//循环步长</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">&lt;-</span> <span class=\"token number\">1</span> to <span class=\"token number\">10</span> by <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      println<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//本质</span>\n    <span class=\"token comment\">/*\n        for (i &lt;- (1 to 10).by(2))&#123;\n\n        &#125;*/</span>\n\n    println<span class=\"token punctuation\">(</span><span class=\"token string\">\"=================\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">//步长小于0</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">&lt;-</span> <span class=\"token number\">20</span> to <span class=\"token number\">1</span> by <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      println<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//反转遍历 10到1</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">&lt;-</span> <span class=\"token number\">10</span> to <span class=\"token number\">1</span> by <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">//或者</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">&lt;-</span> <span class=\"token number\">1</span> to <span class=\"token number\">10</span> reverse<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">//by的类型：正数，负数，小数，不能是0</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">&lt;-</span> <span class=\"token number\">1.0</span> to <span class=\"token number\">10.0</span> by <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"循环嵌套\"><a href=\"#循环嵌套\" class=\"headerlink\" title=\"循环嵌套\"></a>循环嵌套</h3><p>java里面遍历二维数组时，我们需要用到循环嵌套</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> rows<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> colums<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//do something</span>\n        \n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在scala中我们这样写</p>\n<pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">&lt;-</span> <span class=\"token number\">0</span> to <span class=\"token namespace\">rows</span><span class=\"token punctuation\">;</span> j <span class=\"token keyword\">&lt;-</span> <span class=\"token number\">0</span> to <span class=\"token namespace\">colums</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//do something</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>简洁的极致了属于是</p>\n<h3 id=\"for的返回值\"><a href=\"#for的返回值\" class=\"headerlink\" title=\"for的返回值\"></a>for的返回值</h3><p>这玩意可有意思了，一般情况下for的返回值就是unit，说白了就是空值，但是我们可以用<strong>yield</strong>关键字去指定返回值，注意，循环有那么多元素，返回值也不是一个单值，而是一个<strong>vector</strong></p>\n<pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\"><span class=\"token keyword\">val</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">&lt;-</span> <span class=\"token number\">1</span> to <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">yield</span> i<span class=\"token operator\">*</span>i<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>有什么用呢，这个过程就是相当于对于数组的每一个元素做了操作然后返回，用java怎么写呢</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>那看到scala更有趣一点，直接将操作完的赋值，天生就适合大数据场景，非常的nice</p>\n<h2 id=\"4-3-while与dowhile\"><a href=\"#4-3-while与dowhile\" class=\"headerlink\" title=\"4.3 while与dowhile\"></a>4.3 while与dowhile</h2><p>和java里一样的就不说了，注意在scala中能用for就不要用while</p>\n<p>同时while也没有返回值</p>\n<h2 id=\"循环中断\"><a href=\"#循环中断\" class=\"headerlink\" title=\"循环中断\"></a>循环中断</h2><p>scala中没有break和continue那肯定有替换方案</p>\n<p>对于continue之前的循环守卫已经讲了</p>\n<p>对于break，scala中用类似抛出异常的方式，去做break，或者用Breaks（本质上还是封装了那个抛出，只是还会执行接下来的代码）</p>\n<pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\">Breaks<span class=\"token punctuation\">.</span>breakable<span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">&lt;-</span> <span class=\"token number\">0</span> until <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">)</span>\n          Breaks<span class=\"token punctuation\">.</span>break<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        println<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>或者在导包的时候直接：<code>import scala.util.control.Breaks._</code>然后代码中省略Breaks.</p>\n<pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\">breakable<span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">&lt;-</span> <span class=\"token number\">0</span> until <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">)</span>\n        break<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      println<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"多重循环\"><a href=\"#多重循环\" class=\"headerlink\" title=\"多重循环\"></a>多重循环</h2><p>案例：输出九重妖塔</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#96;&#96;&#96;\n\n\n\n# 第5章 函数式编程\n\n## 5.1 函数基础\n什么是函数式编程，刚打完游戏脑子蒙的也不想动脑子，反正这个函数就和数学里面的函数一样 y &#x3D; f(x)，传进来一个x，返回一个结果y，那和面向过程不是没差别嘛，我也不知道。感觉至少这玩意说是给数学好的人用的，他们用的习惯。\n\n\n\n### 5.1.1 函数基础\n\n基本语法\n\n![](https:&#x2F;&#x2F;gitee.com&#x2F;cencus&#x2F;blog-image&#x2F;raw&#x2F;master&#x2F;blogImage&#x2F;1649501424975.png)\n\n### 5.1.2 函数与方法的区别\n\n不晓得\n\n### 5.1.3 函数定义\n\n前面有，就那样定义的\n\n无非就是这样变一下那样变一下\n\n### 5.1.4 函数参数\n\n（1）可变参数  &#96;参数名: 类型*&#96;\n\n&#96;&#96;&#96;scala\ndef f1(str: String*): Unit &#x3D; &#123;\n\tprintln(str)\n&#125;\n\nf1(&quot;alice&quot;)\nf1(&quot;aaa&quot;, &quot;b&quot;, &quot;c&quot;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>（2）如果参数列表中存在多个参数，那么可变参数一般放置在最后 </p>\n<pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\"><span class=\"token comment\">//多个参数，可变参数要放到最后</span>\n    <span class=\"token keyword\">def</span> f2<span class=\"token punctuation\">(</span>str1<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> str2<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>\n      println<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token id function\">s</span><span class=\"token string\">\"str1=</span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">str1</span></span><span class=\"token string\">, str2=</span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">str2</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    f2<span class=\"token punctuation\">(</span><span class=\"token string\">\"alice\"</span><span class=\"token punctuation\">)</span>\n    f2<span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>（3）参数默认值，一般将有默认值的参数放置在参数列表的后面</p>\n<p>有没有想过为什么，如果不放最后，那就会歧义嘛 </p>\n<pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\"><span class=\"token comment\">//给参数默认值，也放在最后</span>\n<span class=\"token keyword\">def</span> f3<span class=\"token punctuation\">(</span>age<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"atguigu\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>（4）带名参数</p>\n<pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\"><span class=\"token comment\">//带名参数，和默认值连用，就不用考虑顺序了</span>\n<span class=\"token keyword\">def</span> f4<span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"atguigu\"</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>\n  println<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token id function\">s</span><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">$&#123;</span><span class=\"token expression\">age</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">岁的</span><span class=\"token interpolation\"><span class=\"token punctuation\">$&#123;</span><span class=\"token expression\">name</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">爱刘熙\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\nf4<span class=\"token punctuation\">(</span><span class=\"token string\">\"Oliva\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\nf4<span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"lx\"</span><span class=\"token punctuation\">,</span>age <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\nf4<span class=\"token punctuation\">(</span>age <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注释里说了，和默认值连用，就不要考虑顺序，之前写程序不是老有很多默认值，就是这样的，只需要对需要改变的值操作就行</p>\n<h3 id=\"5-1-5-函数至简原则\"><a href=\"#5-1-5-函数至简原则\" class=\"headerlink\" title=\"5.1.5 函数至简原则\"></a>5.1.5 函数至简原则</h3><p>这玩意简称鬼都不认识原则，是真的化简到了极致，情况还比较多，后面有精力总结一下吧哎 <code>todo</code></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>函数至简原则：能省则省</p>\n<p> 1）至简原则细节 </p>\n<p>（1）return 可以省略，Scala 会使用函数体的最后一行代码作为返回值 </p>\n<p>（2）如果函数体只有一行代码，可以省略花括号 </p>\n<p>（3）返回值类型如果能够推断出来，那么可以省略（:和返回值类型一起省略） </p>\n<p>（4）如果有 return，则不能省略返回值类型，必须指定 </p>\n<p>（5）如果函数明确声明 unit，那么即使函数体中使用 return 关键字也不起作用 </p>\n<p>（6）Scala 如果期望是无返回值类型，可以省略等号 </p>\n<p>（7）如果函数无参，但是声明了参数列表，那么调用时，小括号，可加可不加 </p>\n<p>（8）如果函数没有参数列表，那么小括号可以省略，调用时小括号必须省略 </p>\n<p>（9）如果不关心名称，只关心逻辑处理，那么函数名（def）可以省略</p></blockquote>\n<pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">chapter05</span>\n\n<span class=\"token comment\">//函数至简原则</span>\n<span class=\"token keyword\">object</span> Test04_Simplify <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">def</span> main<span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">def</span> f0<span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> name\n    <span class=\"token punctuation\">&#125;</span>\n\n    println<span class=\"token punctuation\">(</span>f0<span class=\"token punctuation\">(</span><span class=\"token string\">\"atguigu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">//    （1）return 可以省略，Scala 会使用函数体的最后一行代码作为返回值</span>\n    <span class=\"token keyword\">def</span> f1<span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n      name\n    <span class=\"token punctuation\">&#125;</span>\n\n    println<span class=\"token punctuation\">(</span>f1<span class=\"token punctuation\">(</span><span class=\"token string\">\"atguigu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">//    （2）如果函数体只有一行代码，可以省略花括号</span>\n    <span class=\"token keyword\">def</span> f2<span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> name\n\n    println<span class=\"token punctuation\">(</span>f2<span class=\"token punctuation\">(</span><span class=\"token string\">\"atguigu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">//    （3）返回值类型如果能够推断出来，那么可以省略（:和返回值类型一起省略）</span>\n    <span class=\"token keyword\">def</span> f3<span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> name <span class=\"token comment\">//已经有了f(x) = x</span>\n\n    println<span class=\"token punctuation\">(</span>f3<span class=\"token punctuation\">(</span><span class=\"token string\">\"atguigu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">//    （4）如果有 return，则不能省略返回值类型，必须指定</span>\n    <span class=\"token comment\">//    def f0(name: String) = &#123;</span>\n    <span class=\"token comment\">//      return name</span>\n    <span class=\"token comment\">//    &#125;</span>\n    <span class=\"token comment\">//    （5）如果函数明确声明 unit，那么即使函数体中使用 return 关键字也不起作用</span>\n    <span class=\"token keyword\">def</span> f5<span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> name\n    <span class=\"token punctuation\">&#125;</span>\n\n    println<span class=\"token punctuation\">(</span>f5<span class=\"token punctuation\">(</span><span class=\"token string\">\"atguigu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">//    （6）Scala 如果期望是无返回值类型，可以省略等号</span>\n    <span class=\"token keyword\">def</span> f6<span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      println<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    f6<span class=\"token punctuation\">(</span><span class=\"token string\">\"atguigu\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">//    （7）如果函数无参，但是声明了参数列表，那么调用时，小括号，可加可不加</span>\n    <span class=\"token keyword\">def</span> f7<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n      println<span class=\"token punctuation\">(</span><span class=\"token string\">\"atguigu\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    f7<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    f7\n\n    <span class=\"token comment\">//    （8）如果函数没有参数列表，那么小括号可以省略，调用时小括号必须省略</span>\n    <span class=\"token keyword\">def</span> f8<span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n      println<span class=\"token punctuation\">(</span><span class=\"token string\">\"atguigu\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    f8\n    <span class=\"token comment\">//    f8() error</span>\n    <span class=\"token comment\">//    （9）如果不关心名称，只关心逻辑处理，那么函数名（def）可以省略匿名函数</span>\n\n    <span class=\"token comment\">//    (name: String) => &#123;println(name)&#125;</span>\n\n\n  <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"5-2-函数高级\"><a href=\"#5-2-函数高级\" class=\"headerlink\" title=\"5.2 函数高级\"></a>5.2 函数高级</h2><h3 id=\"5-2-1-高阶函数—不是很高级的函数，就是函数的高级一点的用法\"><a href=\"#5-2-1-高阶函数—不是很高级的函数，就是函数的高级一点的用法\" class=\"headerlink\" title=\"5.2.1 高阶函数—不是很高级的函数，就是函数的高级一点的用法\"></a>5.2.1 高阶函数—不是很高级的函数，就是函数的高级一点的用法</h3><p><code>todo</code>直接不想写了，太累了，加个todo有时间再写</p>\n<p>1、函数作为值传递</p>\n<p>2、函数作为参数传递</p>\n<p>3、函数作为函数的返回值传递</p>\n<h3 id=\"5-2-2-匿名函数\"><a href=\"#5-2-2-匿名函数\" class=\"headerlink\" title=\"5.2.2 匿名函数\"></a>5.2.2 匿名函数</h3><p>这玩意也不是人，虽然之前学过</p>\n<pre class=\"line-numbers language-scala\" data-language=\"scala\"><code class=\"language-scala\"><span class=\"token punctuation\">(</span>num<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//dosomething</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>就张这样，没有名字，就是一个输入然后操作</p>\n<p>关键在于下面的特性：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>传递匿名函数至简原则： </p>\n<p>（1）参数的类型可以省略，会根据形参进行自动的推导 </p>\n<p>（2）类型省略之后，发现只有一个参数，则圆括号可以省略；其他情况：没有参数和参 数超过 1 的永远不能省略圆括号</p>\n<p>（3）匿名函数如果只有一行，则大括号也可以省略 </p>\n<p>（4）如果参数只出现一次，则参数省略且后面参数可以用_代替</p></blockquote>\n<p>参数可以不写类型，只有一个参数可以不写圆括号，函数体只有一行可以不写大括号，参数可以用<code>_</code>作为代替</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">(x,y) &#x3D;&gt; x*y\n&#x2F;&#x2F;直接可以简写成\n_*_\n&#x2F;&#x2F;相当于一个占位符那种感觉，然后按照参数的顺序往里面填，但是注意只能对于那种只用一次的参数<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"5-2-3-高阶函数案例\"><a href=\"#5-2-3-高阶函数案例\" class=\"headerlink\" title=\"5.2.3 高阶函数案例\"></a>5.2.3 高阶函数案例</h3>","feature":true,"text":"第1章 入门基于JVM，与Java关系密切 Java是一门先编译后解释的语言 Scala与java一样 特点：融合怪 面向对象 函数式编程 静态类型（类型提前声明指定）编程语言 多范式 结合了面对对象与函数式编程 .scala会被编译为java字节码.class，然后运行在JVM...","link":"","photos":[],"count_time":{"symbolsCount":"7.5k","symbolsTime":"7 mins."},"categories":[],"tags":[{"name":"语言，Scala，大数据","slug":"语言，Scala，大数据","count":1,"path":"api/tags/语言，Scala，大数据.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AC%AC1%E7%AB%A0-%E5%85%A5%E9%97%A8\"><span class=\"toc-text\">第1章  入门</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AC%AC2%E7%AB%A0-%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">第2章 变量和数据类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-1%E6%B3%A8%E9%87%8A\"><span class=\"toc-text\">2.1注释</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#printf-%E5%8D%A0%E4%BD%8D%E7%AC%A6\"><span class=\"toc-text\">printf+占位符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8F%92%E5%80%BC%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">插值表达式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA\"><span class=\"toc-text\">格式化输出</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%8D%E5%AF%B9%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%86%85%E7%9A%84%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E5%81%9A%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">不对字符串内的特殊字符做解析</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E8%A1%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%8E%9F%E6%A0%BC%E5%BC%8F%E8%BE%93%E5%87%BA\"><span class=\"toc-text\">多行字符串的原格式输出</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AC%AC3%E7%AB%A0-%E5%BF%98%E4%BA%86%E6%98%AF%E4%BB%80%E4%B9%88%E7%AB%A0%E8%8A%82%E4%BA%86\"><span class=\"toc-text\">第3章  忘了是什么章节了</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AC%AC4%E7%AB%A0-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">第4章  流程控制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-1-if-else\"><span class=\"toc-text\">4.1 if else</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-2-for%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">4.2 for循环</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">语法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%8C%83%E5%9B%B4%E9%81%8D%E5%8E%86\"><span class=\"toc-text\">范围遍历</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%8D%E6%83%B3%E5%8C%85%E5%90%AB%E7%BB%93%E6%9D%9F%E4%BD%8D%E7%BD%AE-until\"><span class=\"toc-text\">不想包含结束位置 until</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#foreach%E7%9A%84%E9%9B%86%E5%90%88%E9%81%8D%E5%8E%86\"><span class=\"toc-text\">foreach的集合遍历</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BE%AA%E7%8E%AF%E5%AE%88%E5%8D%AB-if\"><span class=\"toc-text\">循环守卫 if</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BE%AA%E7%8E%AF%E6%AD%A5%E9%95%BF-by\"><span class=\"toc-text\">循环步长 by</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97\"><span class=\"toc-text\">循环嵌套</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#for%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC\"><span class=\"toc-text\">for的返回值</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-3-while%E4%B8%8Edowhile\"><span class=\"toc-text\">4.3 while与dowhile</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BE%AA%E7%8E%AF%E4%B8%AD%E6%96%AD\"><span class=\"toc-text\">循环中断</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E9%87%8D%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">多重循环</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-1-5-%E5%87%BD%E6%95%B0%E8%87%B3%E7%AE%80%E5%8E%9F%E5%88%99\"><span class=\"toc-text\">5.1.5 函数至简原则</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-2-%E5%87%BD%E6%95%B0%E9%AB%98%E7%BA%A7\"><span class=\"toc-text\">5.2 函数高级</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-2-1-%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0%E2%80%94%E4%B8%8D%E6%98%AF%E5%BE%88%E9%AB%98%E7%BA%A7%E7%9A%84%E5%87%BD%E6%95%B0%EF%BC%8C%E5%B0%B1%E6%98%AF%E5%87%BD%E6%95%B0%E7%9A%84%E9%AB%98%E7%BA%A7%E4%B8%80%E7%82%B9%E7%9A%84%E7%94%A8%E6%B3%95\"><span class=\"toc-text\">5.2.1 高阶函数—不是很高级的函数，就是函数的高级一点的用法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-2-2-%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">5.2.2 匿名函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-2-3-%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0%E6%A1%88%E4%BE%8B\"><span class=\"toc-text\">5.2.3 高阶函数案例</span></a></li></ol></li></ol></li></ol>","author":{"name":"Cencus","slug":"blog-author","avatar":"https://gitee.com/cencus/blog-image/raw/master/blogImage/1648381409561.jpg","link":"/","description":"stay hungry, stay foolish.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"spark","uid":"e04902dcdb07e2ad1898c41f1efa8f40","slug":"spark","date":"2022-04-08T12:55:34.000Z","updated":"2022-04-13T03:01:52.071Z","comments":true,"path":"api/articles/spark.json","keywords":null,"cover":[],"text":"第3章 spark运行环境3.1 local模式3.2 standalone模式3.3 yarn模式（公司常用）3.4 k8s &amp; Mesos模式3.5 windows模式3.5.2 本地环境第4章 spark运行架构Driver 驱动器节点，执行spark任务中的mai...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[],"tags":[{"name":"spark","slug":"spark","count":1,"path":"api/tags/spark.json"}],"author":{"name":"Cencus","slug":"blog-author","avatar":"https://gitee.com/cencus/blog-image/raw/master/blogImage/1648381409561.jpg","link":"/","description":"stay hungry, stay foolish.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"思辨","uid":"9db7d7b85a5cd901f6957d349aad6c0c","slug":"思辨","date":"2022-03-31T13:03:51.125Z","updated":"2022-04-13T08:07:52.177Z","comments":true,"path":"api/articles/思辨.json","keywords":null,"cover":null,"text":"2020年7月2日21:15:20 从今日思考：局外人是不是一定比局内人看得更加清楚？为什么问题分析：这个问题的本质是一个不同的角度看待同一个问题会有不同的结果，局内人就是事件的参与者，局外人可能是一个跟他毫不相干的人，可以是他的亲人，可以是他想成为的人，等等，看得更加清楚的意思...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"thinking","slug":"thinking","count":1,"path":"api/tags/thinking.json"}],"author":{"name":"Cencus","slug":"blog-author","avatar":"https://gitee.com/cencus/blog-image/raw/master/blogImage/1648381409561.jpg","link":"/","description":"stay hungry, stay foolish.","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}